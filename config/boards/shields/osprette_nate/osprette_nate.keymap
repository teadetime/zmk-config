/*
* Copyright (c) 2021 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN 0
#define SYMNAV 1
#define BRACK 2
#define NUM 3
#define CONFIG 4

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <140>;
};

/ {
    combos {
        compatible = "zmk,combos";

//Left pinky
        combo_esc {
            timeout-ms = <100>;
            key-positions = <10 20>;
            bindings = <&kp TAB>;
        };
// left middle 
        combo_grave {
            timeout-ms = <100>;
            key-positions = <2 12>;
            bindings = <&kp DOT>;
        };
// left index 
        combo_dash {
            timeout-ms = <100>;
            key-positions = <3 13>;
            bindings = <&kp MINUS>;
        };
// left 5 col
        combo_under {
            timeout-ms = <100>;
            key-positions = <4 14>;
            bindings = <&kp UNDERSCORE>;
        };


// Right 0 col
        combo_dot {
            timeout-ms = <100>;
            key-positions = <5 15>;
            bindings = <&kp DOT>;
        };

// Right index
        combo_tab {
            timeout-ms = <100>;
            key-positions = <6 16>;
            bindings = <&kp TAB>;
        };
// Right Middle
        combo_semi {
            timeout-ms = <100>;
            key-positions = <7 17>;
            bindings = <&kp SEMI>;
        };

// left top index middle
        combo_divide {
            timeout-ms = <100>;
            key-positions = <2 3>;
            bindings = <&kp SLASH>;
        };

// Right top index middle
        combo_equal {
            timeout-ms = <100>;
            key-positions = <6 7>;
            bindings = <&kp EQUAL>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <BRACK SYMNAV>;
            then-layer = <CONFIG>;
            };
        };

    keymap {
        compatible = "zmk,keymap";

MAIN_layer {
// ------------------------------------
// | Q       | W      | E        | R       | T |      | Y | U       | I | O | P       |
// | CTRL(A) | NUM(S) | BRACK(D) | NAV1(F) | G |      | H | NAV2(J) | K | L | ALT(;)  |
// | SHFT(Z) | X      | C        | V       | B |      | N | M       | , | . | SHFT(") |
//                               |         |   |      |   |         |   |

    bindings = <
        &kp Q   &kp W      &kp E        &kp R          &kp T                                &kp Y  &kp U        &kp I        &kp O      &kp P
       &kp A        &lt NUM S  &hm LSHFT D  &hm LCTRL F    &kp G                 &kp H  &hm LCTRL J  &hm LSHFT K  &kp L    &hm RALT SEMI 
     &mt LSHFT Z  &kp X      &kp C        &kp V          &kp B                 &kp N  &kp M        &kp COMMA    &kp DOT  &mt LSHFT DQT
                                        &mt LCTRL DEL  &lt BRACK BSPC       &lt SYMNAV SPACE  &mt LALT RET
                        >;
    };

SYMNAV_layer {
// ------------------------------------
// | # | $ | & | * | ? |      | `   |  %  | @  |    |     |
// | : | _ | - | > | ! |      | TAB | LFT | DN | UP | RGT |
// | ~ | ^ | + | < | = |      | ESC | '   | ,  | .  |     |
//             |   |   |      |     |     |
bindings = <
     &kp HASH   &kp DLLR   &kp AMPS         &kp STAR      &kp QMARK     &kp GRAVE  &kp PRCNT  &kp AT    &trans   &trans
     &kp COLON  &kp UNDER  &hm LSHFT MINUS  &hm LCTRL GT  &kp EXCL      &kp TAB    &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT 
    &kp TILDE  &kp CARET  &kp PLUS         &kp LT        &kp EQUAL     &kp ESC    &kp APOS   &trans    &trans  &trans 
                                            &trans     &trans        &trans     &trans
>;
};

BRACK_layer {
// ------------------------------------
//  | # | $ | & | * | ? |      | ` | ( | ) | " | | |
//  | : | _ | - | > | ! |      | " | [ | ] | / | \ |
//  | ~ | ^ | + | < | = |      | ~ | { | } | < | > |
//              |   |   |      |   |   |
bindings = <
   &kp HASH  &kp DLLR   &kp AMPS   &kp STAR  &kp QMARK     &kp GRAVE  &kp LPAR  &kp RPAR  &kp UNDER   &kp PIPE
   &kp COLON  &kp UNDER  &kp MINUS  &kp GT     &kp EXCL      &kp DQT    &kp LBKT  &kp RBKT  &kp FSLH   &kp BSLH 
   &kp TILDE  &kp CARET  &kp PLUS   &kp LT     &kp EQUAL     &kp TILDE  &kp LBRC  &kp RBRC  &kp LT     &kp GT 
                                    &trans     &trans        &trans     &trans
>;
};

NUM_layer {
// ------------------------------------
// | | | | | |      |   | 7 | 8 | 9 |   |
// | | | | | |      | 0 | 4 | 5 | 6 | 0 |
// | | | | | |      |   | 1 | 2 | 3 |   |
//       | | |      |   |   |
bindings = <
 &trans  &trans &trans &trans &trans     &trans  &kp N7  &kp N8  &kp N9    &trans
 &trans &trans &trans &trans &trans     &kp N0  &kp N4  &kp N5  &kp N6  &kp N0 
&trans &trans &trans &trans &trans     &trans  &kp N1  &kp N2  &kp N3  &trans 
                        &trans &trans     &trans   &trans
>;
};

CONFIG_layer {
// ------------------------------------
// | | | | | |      |   | 7 | 8 | 9 |   |
// | | | | | |      | 0 | 4 | 5 | 6 | 0 |
// | | | | | |      |   | 1 | 2 | 3 |   |
//       | | |      |   |   |
bindings = <
 &trans  &trans &trans &trans &trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_NXT
 &trans &trans &trans &trans &trans     &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_PRV
&trans &trans &trans &trans &trans     &sys_reset  &bootloader &bt BT_CLR  &none  &bt BT_CLR_ALL 
                        &trans &trans     &trans   &trans
>;
};

};
};