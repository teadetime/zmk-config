/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>



#define DEFAULT 0
#define SYMNAV 1
#define BRACK 2
#define NUM 3
#define CONFIG 4
#define NAV1 5
#define NAV2 6

&mt {
    tapping-term-ms = <165>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp TAB>;
        };
        combo_shft_tab {
            timeout-ms = <50>;
            key-positions = <15 16
            >;
            bindings = <&kp LSHFT(TAB)>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    macros {
            ZMK_MACRO(alt_tab,
              wait-ms = <30>;
              tap-ms = <40>;
              bindings =  <&macro_press &kp LALT>,
                          <&macro_tap &kp TAB>,
                          <&macro_release &kp LALT>;
            )
            ZMK_MACRO(alt_shft_tab,
              wait-ms = <30>;
              tap-ms = <40>;
              bindings =  <&macro_press &kp LALT &kp LSHFT>,
                    <&macro_tap &kp TAB>, 
                    <&macro_release &kp LALT &kp LSHFT>;
            )
            ZMK_MACRO(ctrl_tab,
              wait-ms = <30>;
              tap-ms = <40>;
              bindings =  <&macro_press &kp LCTRL>,
                <&macro_tap &kp TAB>
                , <&macro_release &kp LCTRL >;
            )
            ZMK_MACRO(ctrl_shft_tab,
              wait-ms = <30>;
              tap-ms = <40>;
              bindings =  <&macro_press &kp LCTRL &kp LSHFT>,
                    <&macro_tap &kp TAB>, 
                    <&macro_release &kp LCTRL &kp LSHFT>;
            )
        };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <BRACK SYMNAV>;
            then-layer = <CONFIG>;
            };
        };

    keymap {
        compatible = "zmk,keymap";

default_layer {
// ------------------------------------
// | Q       | W      | E        | R       | T |      | Y | U       | I | O | P       |
// | CTRL(A) | NUM(S) | BRACK(D) | NAV1(F) | G |      | H | NAV2(J) | K | L | ALT(;)  |
// | SHFT(Z) | X      | C        | V       | B |      | N | M       | , | . | SHFT(") |
//                               |         |   |      |   |         |   |

    bindings = <
   &kp Q        &kp W      &kp E        &kp R          &kp T                 &kp Y  &kp U       &kp I      &kp O    &kp P
   &hm LCTRL A  &lt NUM S  &lt BRACK D  &kp F          &kp G                 &kp H  &kp J       &kp K      &kp L    &hm RALT N
   &mt LSHFT Z  &kp X      &kp C        &kp V          &kp B                 &kp N  &kp M       &kp COMMA  &kp DOT  &mt LSHFT DQT
                                        &mt LCTRL DEL  &lt BRACK BSPC       &lt SYMNAV SPACE  &mt LALT RET
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
    };

symnav_layer {
// ------------------------------------
// | # | $ | & | * | ? |      | `   |  %  | @  |    |     |
// | : | _ | - | > | ! |      | TAB | LFT | DN | UP | RGT |
// | ~ | ^ | + | < | = |      | ESC | '   | ,  | .  |     |
//             |   |   |      |     |     |
bindings = <
   &kp HASH   &kp DLLR   &kp AMPS   &kp STAR   &kp QMARK     &kp GRAVE  &kp PRCNT  &kp AT    &trans  &trans
   &kp COLON  &kp UNDER  &kp MINUS  &kp GT     &kp EXCL      &kp TAB    &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT
   &kp TILDE  &kp CARET  &kp PLUS   &kp LT     &kp EQUAL     &kp ESC    &kp APOS   &trans    &trans  &trans 
                                    &trans     &trans        &trans     &trans
>;
};

brackets_layer {
// ------------------------------------
//  | # | $ | & | * | ? |      | ` | ( | ) | " | | |
//  | : | _ | - | > | ! |      | " | [ | ] | / | \ |
//  | ~ | ^ | + | < | = |      | ~ | { | } | < | > |
//              |   |   |      |   |   |
bindings = <
   &kp HASH   &kp DLLR   &kp AMPS   &kp STAR  &kp QMARK     &kp GRAVE  &kp LPAR  &kp RPAR  &kp UNDER  &kp PIPE
   &kp COLON  &kp UNDER  &kp MINUS  &kp GT     &kp EXCL      &kp DQT    &kp LBKT  &kp RBKT  &kp FSLH   &kp BSLH
   &kp TILDE  &kp CARET  &kp PLUS   &kp LT     &kp EQUAL     &kp TILDE  &kp LBRC  &kp RBRC  &kp LT     &kp GT 
                                    &trans     &trans        &trans     &trans
>;
};

num_layer {
// ------------------------------------
// | | | | | |      |   | 7 | 8 | 9 |   |
// | | | | | |      | 0 | 4 | 5 | 6 | 0 |
// | | | | | |      |   | 1 | 2 | 3 |   |
//       | | |      |   |   |
bindings = <
   &trans &trans &trans &trans &trans     &trans  &kp N7  &kp N8  &kp N9  &trans 
   &trans &trans &trans &trans &trans     &kp N0  &kp N4  &kp N5  &kp N6  &kp N0
   &trans &trans &trans &trans &trans     &trans  &kp N1  &kp N2  &kp N3  &trans 
                        &trans &trans     &trans   &trans
>;
};


config_layer {
// -----------------------------------------------------------------------------------------
// | | | | | |     | BT1    | BT2   | BT3 | BT4 | BT5 |
// | | | | | |     | BT CLR |       |     |     |     |
// | | | | | |     | Reset  | btldr |     |     |     |
//       | | |     |        |       |
bindings = <
&trans &trans &trans &trans &trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
&trans &trans &trans &trans &trans       &bt BT_CLR   &none        &none        &none        &none
&trans &trans &trans &trans &trans       &sys_reset   &bootloader  &out OUT_TOG &none        &none
                     &trans &trans       &trans       &trans
                        >;
        };
    };
};
